{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.name.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Multiselect from 'vue-multiselect';\nimport axios from \"axios\";\nexport default {\n  name: \"HelloWorld\",\n  components: {\n    Multiselect: Multiselect\n  },\n  data: function data() {\n    return {\n      task: {\n        title: '',\n        isActive: true,\n        completed: false,\n        priority: 1,\n        dueDate: '',\n        groups: {}\n      },\n      editedTask: null,\n      statuses: [\"to-do\", \"in-progress\", \"finished\"],\n\n      /* Status could be: 'to-do' / 'in-progress' / 'finished' */\n      tasks: [{\n        name: \"Steal bananas from the supermarket.\",\n        status: \"to-do\"\n      }, {\n        name: \"Eat 1 kg chocolate in 1 hour.\",\n        status: \"in-progress\"\n      }, {\n        name: \"Create YouTube video.\",\n        status: \"finished\"\n      }],\n      options: [],\n      value: ''\n    };\n  },\n  created: function created() {\n    this.getAllGroups();\n  },\n  methods: {\n    getAllGroups: function getAllGroups() {\n      var _this = this;\n\n      axios.get('/todos/groups/').then(function (r) {\n        _this.options = r.data.results;\n      });\n    },\n    capitalizeFirstChar: function capitalizeFirstChar(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n    changeStatus: function changeStatus(index) {\n      var newIndex = this.statuses.indexOf(this.tasks[index].status);\n      if (++newIndex > 2) newIndex = 0;\n      this.tasks[index].status = this.statuses[newIndex];\n    },\n    deleteTask: function deleteTask(index) {\n      this.tasks.splice(index, 1);\n    },\n    editTask: function editTask(index) {\n      this.task = this.tasks[index].name;\n      this.editedTask = index;\n    },\n\n    /**\n     * Add / Update task\n     */\n    submitTask: function submitTask() {\n      if (this.task.length === 0) return;\n      /* We need to update the task */\n\n      if (this.editedTask != null) {\n        this.tasks[this.editedTask].name = this.task;\n        this.editedTask = null;\n      } else {\n        /* We need to add new task */\n        this.tasks.push({\n          name: this.task,\n          status: \"todo\"\n        });\n      }\n\n      this.task = \"\";\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AAEA;AACAA,oBADA;AAEAC;AAAAC;AAAA,GAFA;AAGAC,MAHA,kBAGA;AACA;AACAC;AACAC,iBADA;AAEAC,sBAFA;AAGAC,wBAHA;AAIAC,mBAJA;AAKAC,mBALA;AAMAC;AANA,OADA;AASAC,sBATA;AAUAC,oDAVA;;AAYA;AACAC,cACA;AACAb,mDADA;AAEAc;AAFA,OADA,EAKA;AACAd,6CADA;AAEAc;AAFA,OALA,EASA;AACAd,qCADA;AAEAc;AAFA,OATA,CAbA;AA2BAC,iBA3BA;AA4BAC;AA5BA;AA8BA,GAlCA;AAmCAC,SAnCA,qBAmCA;AACA;AACA,GArCA;AAsCAC;AACAC,gBADA,0BACA;AAAA;;AACAC;AACA;AACA,OAFA;AAGA,KALA;AAMAC,uBANA,+BAMAC,GANA,EAMA;AACA;AACA,KARA;AASAC,gBATA,wBASAC,KATA,EASA;AACA;AACA;AACA;AACA,KAbA;AAeAC,cAfA,sBAeAD,KAfA,EAeA;AACA;AACA,KAjBA;AAkBAE,YAlBA,oBAkBAF,KAlBA,EAkBA;AACA;AACA;AACA,KArBA;;AAsBA;AACA;AACA;AACAG,cAzBA,wBAyBA;AACA;AAEA;;AACA;AACA;AACA;AACA,OAHA,MAGA;AACA;AACA;AACA3B,yBADA;AAEAc;AAFA;AAIA;;AAEA;AACA;AAzCA;AAtCA","names":["name","components","Multiselect","data","task","title","isActive","completed","priority","dueDate","groups","editedTask","statuses","tasks","status","options","value","created","methods","getAllGroups","axios","capitalizeFirstChar","str","changeStatus","index","deleteTask","editTask","submitTask"],"sourceRoot":"src/views","sources":["ToDo.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- Heading -->\n    <h2 class=\"text-center mt-5\">My Vue Todo App</h2>\n    <div class=\"d-flex ml-auto mt-5\">\n      <button type=\"button\" class=\"btn btn-outline-success ml-auto\" data-toggle=\"modal\" data-target=\"#exampleModalCenter\">\n        ToDo Olu≈ütur\n      </button>\n    </div>\n    <div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\" id=\"exampleModalLongTitle\">Modal title</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        ...\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n        <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\n      </div>\n    </div>\n  </div>\n</div>\n    <div>\n      <div class=\"col-sm-12 p-0\">\n        <label>Groups</label>\n        <multiselect\n            v-model=\"task.groups\"\n            tag-placeholder=\"Not Found!\"\n            placeholder=\"Group Title\"\n            label=\"title\"\n            track-by=\"title\"\n            :options=\"options\"\n            :multiple=\"false\"\n            :taggable=\"false\"\n        />\n      </div>\n    </div>\n    <div class=\"d-flex mt-5\">\n      <input\n          type=\"text\"\n          v-model=\"task\"\n          placeholder=\"Enter task\"\n          class=\"w-100 form-control mr-2\"\n      />\n      <button class=\"btn btn-warning rounded-0\" @click=\"submitTask\">\n        SUBMIT\n      </button>\n    </div>\n\n    <!-- Task table -->\n    <table class=\"table table-bordered mt-5\">\n      <thead>\n      <tr>\n        <th scope=\"col\">Task</th>\n        <th scope=\"col\" class=\"text-center\">Group Name</th>\n        <th scope=\"col\" style=\"width: 120px\">IsActive</th>\n        <th scope=\"col\" style=\"width: 120px\">Priority</th>\n        <th scope=\"col\" class=\"text-center\">Due Date</th>\n        <th scope=\"col\" class=\"text-center\">Operation</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr v-for=\"(task, index) in tasks\" :key=\"index\">\n        <td>\n            <span :class=\"{ 'line-through': task.status === 'finished' }\">\n              {{ task.name }}\n            </span>\n        </td>\n        <td>\n            <span\n                class=\"pointer noselect\"\n                @click=\"changeStatus(index)\"\n                :class=\"{\n                'text-danger': task.status === 'to-do',\n                'text-success': task.status === 'finished',\n                'text-warning': task.status === 'in-progress',\n              }\"\n            >\n              {{ capitalizeFirstChar(task.status) }}\n            </span>\n        </td>\n        <td class=\"text-center\">\n          <div @click=\"deleteTask(index)\">\n            <span class=\"fa fa-trash pointer\"></span>\n          </div>\n        </td>\n        <td class=\"text-center\">\n          <div @click=\"editTask(index)\">\n            <p class=\"fa fa-pen pointer\"></p>\n          </div>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\n\nimport Multiselect from 'vue-multiselect'\nimport axios from \"axios\";\n\nexport default {\n  name: \"HelloWorld\",\n  components: {Multiselect},\n  data() {\n    return {\n      task: {\n        title: '',\n        isActive: true,\n        completed: false,\n        priority: 1,\n        dueDate: '',\n        groups: {},\n      },\n      editedTask: null,\n      statuses: [\"to-do\", \"in-progress\", \"finished\"],\n\n      /* Status could be: 'to-do' / 'in-progress' / 'finished' */\n      tasks: [\n        {\n          name: \"Steal bananas from the supermarket.\",\n          status: \"to-do\",\n        },\n        {\n          name: \"Eat 1 kg chocolate in 1 hour.\",\n          status: \"in-progress\",\n        },\n        {\n          name: \"Create YouTube video.\",\n          status: \"finished\",\n        },\n      ],\n      options: [],\n      value: '',\n    };\n  },\n  created() {\n    this.getAllGroups()\n  },\n  methods: {\n    getAllGroups() {\n      axios.get('/todos/groups/').then(r => {\n        this.options = r.data.results\n      })\n    },\n    capitalizeFirstChar(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n    changeStatus(index) {\n      let newIndex = this.statuses.indexOf(this.tasks[index].status);\n      if (++newIndex > 2) newIndex = 0;\n      this.tasks[index].status = this.statuses[newIndex];\n    },\n\n    deleteTask(index) {\n      this.tasks.splice(index, 1);\n    },\n    editTask(index) {\n      this.task = this.tasks[index].name;\n      this.editedTask = index;\n    },\n    /**\n     * Add / Update task\n     */\n    submitTask() {\n      if (this.task.length === 0) return;\n\n      /* We need to update the task */\n      if (this.editedTask != null) {\n        this.tasks[this.editedTask].name = this.task;\n        this.editedTask = null;\n      } else {\n        /* We need to add new task */\n        this.tasks.push({\n          name: this.task,\n          status: \"todo\",\n        });\n      }\n\n      this.task = \"\";\n    },\n  },\n};\n</script>\n\n<style src=\"vue-multiselect/dist/vue-multiselect.min.css\"></style>\n\n\n<style scoped>\n.pointer {\n  cursor: pointer;\n}\n\n.noselect {\n  -webkit-touch-callout: none; /* iOS Safari */\n  -webkit-user-select: none; /* Safari */\n  -khtml-user-select: none; /* Konqueror HTML */\n  -moz-user-select: none; /* Old versions of Firefox */\n  -ms-user-select: none; /* Internet Explorer/Edge */\n  user-select: none;\n  /* Non-prefixed version, currently\n                                   supported by Chrome, Edge, Opera and Firefox */\n}\n\n.line-through {\n  text-decoration: line-through;\n}\n</style>"]},"metadata":{},"sourceType":"module"}