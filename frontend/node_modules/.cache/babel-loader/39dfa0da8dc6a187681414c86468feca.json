{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport router from \"../router\";\nimport axios from \"axios\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    token: \"\"\n  },\n  getters: {\n    isAuthenticated: function isAuthenticated(state) {\n      return state.token !== \"\";\n    }\n  },\n  mutations: {\n    setToken: function setToken(state, token) {\n      state.token = token;\n    },\n    clearToken: function clearToken(state) {\n      state.token = \"\";\n    }\n  },\n  actions: {\n    initAuth: function initAuth(_ref) {\n      var commit = _ref.commit,\n          dispatch = _ref.dispatch;\n      var token = localStorage.getItem(\"token\");\n\n      if (token) {\n        axios.defaults.headers.common['Authorization'] = \"Bearer \" + token; // let expirationDate = localStorage.getItem(\"expirationDate\")\n        // let time = new Date().getTime()\n        //\n        // if (time >= +expirationDate) {\n        //     console.log(\"token süresi geçmiş...\")\n        //     dispatch(\"logout\")\n        // } else {\n        //     commit(\"setToken\", token)\n        //     let timerSecond = +expirationDate - time\n        //     console.log(timerSecond)\n        //     dispatch(\"setTimeoutTimer\", timerSecond)\n        //     router.push(\"/\")\n        // }\n      } else {\n        router.push(\"/auth\");\n        return false;\n      }\n    },\n    login: function login(_ref2, authData) {\n      var commit = _ref2.commit,\n          dispatch = _ref2.dispatch,\n          state = _ref2.state;\n      var authLink = \"/api/authentication/login/\";\n      return axios.post(authLink, {\n        email: authData.email,\n        password: authData.password\n      }).then(function (response) {\n        // console.log(response.data)\n        commit(\"setToken\", response.data.access);\n        localStorage.setItem(\"token\", response.data.access); // localStorage.setItem(\"expirationDate\", new Date().getTime() + +response.data.expiresIn * 1000)\n        // // localStorage.setItem(\"expirationDate\", new Date().getTime() + 10000)\n        //\n        // dispatch(\"setTimeoutTimer\", +response.data.expiresIn * 1000)\n        // dispatch(\"setTimeoutTimer\", 10000)\n      });\n    },\n    register: function register(_ref3, authData) {\n      var dispatch = _ref3.dispatch;\n      var authLink = \"/api/register/\";\n      return axios.post(authLink, authData).catch(function (r) {\n        console.log(r);\n      });\n    },\n    logout: function logout(_ref4) {\n      var commit = _ref4.commit;\n      commit(\"clearToken\");\n      localStorage.removeItem(\"token\"); // localStorage.removeItem(\"expirationDate\")\n\n      router.replace(\"/auth\");\n    },\n    setTimeoutTimer: function setTimeoutTimer(_ref5, expiresIn) {\n      var dispatch = _ref5.dispatch;\n      setTimeout(function () {\n        dispatch(\"logout\");\n      }, expiresIn);\n    }\n  },\n  modules: {}\n});","map":{"version":3,"sources":["/home/emre/PycharmProjects/djangoProject/frontend/project/src/store/index.js"],"names":["Vue","Vuex","router","axios","use","Store","state","token","getters","isAuthenticated","mutations","setToken","clearToken","actions","initAuth","commit","dispatch","localStorage","getItem","defaults","headers","common","push","login","authData","authLink","post","email","password","then","response","data","access","setItem","register","catch","r","console","log","logout","removeItem","replace","setTimeoutTimer","expiresIn","setTimeout","modules"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport router from \"../router\"\nimport axios from \"axios\";\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n    state: {\n        token: \"\",\n    },\n    getters: {\n        isAuthenticated(state){\n            return state.token !== \"\"\n        }\n    },\n    mutations: {\n        setToken(state, token) {\n            state.token = token\n        },\n        clearToken(state) {\n            state.token = \"\"\n        }\n    },\n    actions: {\n        initAuth({commit, dispatch}) {\n            let token = localStorage.getItem(\"token\")\n            if (token) {\n                axios.defaults.headers.common['Authorization'] = \"Bearer \" + token\n                // let expirationDate = localStorage.getItem(\"expirationDate\")\n                // let time = new Date().getTime()\n                //\n                // if (time >= +expirationDate) {\n                //     console.log(\"token süresi geçmiş...\")\n                //     dispatch(\"logout\")\n                // } else {\n                //     commit(\"setToken\", token)\n                //     let timerSecond = +expirationDate - time\n                //     console.log(timerSecond)\n                //     dispatch(\"setTimeoutTimer\", timerSecond)\n                //     router.push(\"/\")\n                // }\n\n            } else {\n                router.push(\"/auth\")\n                return false\n            }\n        },\n        login({commit, dispatch, state}, authData) {\n            let authLink = \"/api/authentication/login/\"\n            return axios.post(\n                authLink ,\n                {email: authData.email, password: authData.password}\n            ).then(response => {\n                // console.log(response.data)\n                commit(\"setToken\", response.data.access)\n                localStorage.setItem(\"token\", response.data.access)\n\n                // localStorage.setItem(\"expirationDate\", new Date().getTime() + +response.data.expiresIn * 1000)\n                // // localStorage.setItem(\"expirationDate\", new Date().getTime() + 10000)\n                //\n                // dispatch(\"setTimeoutTimer\", +response.data.expiresIn * 1000)\n                // dispatch(\"setTimeoutTimer\", 10000)\n            })\n        },\n        register({dispatch},authData){\n            let authLink = \"/api/register/\"\n            return axios.post(authLink,authData).catch( r => {\n                console.log(r)\n            })\n        },\n        logout({commit}) {\n            commit(\"clearToken\")\n            localStorage.removeItem(\"token\")\n            // localStorage.removeItem(\"expirationDate\")\n            router.replace(\"/auth\")\n        },\n        setTimeoutTimer({dispatch}, expiresIn) {\n            setTimeout(() => {\n                dispatch(\"logout\")\n            }, expiresIn)\n        }\n\n    },\n    modules: {}\n})\n"]},"metadata":{},"sourceType":"module"}